name: Build and Release

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  test:
    name: Test and Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check formatting
        run: npm run format-check

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

  build:
    name: Build Action
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and package
        run: npm run all

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pullhawk-dist
          path: |
            dist/
            lib/
            action.yml
            README.md
            package.json
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and package
        run: npm run all

      - name: Update package.json version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${{ github.ref_name }}
          VERSION_NUMBER=${VERSION#v}

          # Update package.json version
          npm version $VERSION_NUMBER --no-git-tag-version

          echo "Updated package.json version to $VERSION_NUMBER"

      - name: Commit updated dist files
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add the built files and updated package.json
          git add dist/ package.json

          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to dist/ files or package.json"
          else
            git commit -m "build: update dist and version for ${{ github.ref_name }}"
            # Force push the tag to include the new commit
            git tag -f ${{ github.ref_name }}
            git push origin HEAD:main
            git push origin ${{ github.ref_name }} --force
          fi

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")

          if [ -n "$PREV_TAG" ]; then
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## Changes in ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            git log --pretty=format:"- %s (%h)" ${PREV_TAG}..HEAD >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
            echo "## pullHawk ${{ steps.get_version.outputs.VERSION }}" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "ðŸ¦… **Privacy-First AI Code Review for GitHub Pull Requests**" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "First release of pullHawk - AI-powered code reviewer for private LLM environments." >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### Features" >> $GITHUB_OUTPUT
            echo "- âœ… Private LLM integration via T-Systems AI Gateway" >> $GITHUB_OUTPUT
            echo "- âœ… Support for GPT-4o Mini and Claude 3.7 Sonnet" >> $GITHUB_OUTPUT
            echo "- âœ… Configurable project environments via STRIVE_PROJECT_NAME" >> $GITHUB_OUTPUT
            echo "- âœ… Privacy-first design - no external API dependencies" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo "### Usage" >> $GITHUB_OUTPUT
            echo "Use \`conmob-ai/pullhawk@${{ steps.get_version.outputs.VERSION }}\` in your workflows." >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Create ZIP archive
        run: |
          zip -r pullhawk-${{ steps.get_version.outputs.VERSION }}.zip \
            dist/ \
            lib/ \
            action.yml \
            README.md \
            package.json \
            -x "*.map" "node_modules/*"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: pullHawk ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pullhawk-${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: pullhawk-${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip

      - name: Update major version tag
        if: ${{ !contains(steps.get_version.outputs.VERSION, '-') }}
        run: |
          # Extract major version (e.g., v1 from v1.2.3)
          MAJOR_VERSION=$(echo ${{ steps.get_version.outputs.VERSION }} | sed 's/\([^.]*\).*/\1/')

          # Create or update the major version tag
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Delete existing tag if it exists
          git tag -d $MAJOR_VERSION 2>/dev/null || true
          git push origin :refs/tags/$MAJOR_VERSION 2>/dev/null || true

          # Create new tag
          git tag $MAJOR_VERSION
          git push origin $MAJOR_VERSION

  update-usage-examples:
    name: Update Usage Examples
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Update README with latest version
        run: |
          # Update README.md to use the latest version in examples
          sed -i 's|conmob-ai/pullhawk@v[0-9]*\.[0-9]*\.[0-9]*|conmob-ai/pullhawk@${{ steps.get_version.outputs.VERSION }}|g' README.md
          sed -i 's|conmob-ai/pullhawk@latest|conmob-ai/pullhawk@${{ steps.get_version.outputs.VERSION }}|g' README.md

      - name: Commit updated examples
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add README.md
            git commit -m "docs: update examples to use ${{ steps.get_version.outputs.VERSION }}"
            git push origin main
          fi
